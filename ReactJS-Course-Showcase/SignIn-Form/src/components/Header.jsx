import logo from '../assets/logo.png';

export default function Header() {
  return (
    <header className="flex flex-col items-center mt-8 mb-16">
      <img
        src={logo}
        alt="A canvas"
        className="mb-8 w-44 h-44 object-contain"
      />
      <h1 className="text-4xl font-semibold tracking-widest text-center uppercase text-amber-800 font-title">
        ReactArt
      </h1>
      <p className="text-stone-500">A community of artists and art-lovers.</p>
    </header>
  );
}

/* Disadvantage of Vanilla CSS and inline-css

*-> Vanilla CSS styles are not "scoped" to Components 
-> to which they belong !
-> they are applied globally to the page
-> some css class can effect some other different components as well

? what we can do if we wanna achieve some scoping?
*-> one solution: Switch to "Inline-Styles"
   -> it means, apply them right in the JSX code

   FOR INSTANCE: 
   <p
      style={{
        color: 'red',
        textAlign: 'center',
      }}
    >
      A community of artists and art-lovers.
    </p>

   -> 1. take a dynamic value
   -> 2. then pass an object as a value to the style prop
   -> 3. apply css class as "key-value" pairs

* Advantage: 
  -> quick and easy to add 
  -> styles affect the element to which you add them
  -> dynamic (conditional) styling is simple

* Disadvantage: 
  -> you need to style every element individually
  -> no separation between css and jsx code
*/

/* CSS Modules

-> is an approach, a solution that needs to be implemented and forced by build process that's used in React project
-> it's not a default browsers or JavaScript feature

*-> is an approach where the build tool will transform your css class names to class names that are guaranteed to be unique per file

? to achieve CSS rule Scoping - fro instance :

*-> change Header.css file to => Header.module.css file

    - Header.module=> is a signal for the underlying build process
    - for "vite.config.js" build tool
    - to process "Header.module.css" file slightly differently

*-> now we import it in Header.jsx differently:
    import './Header.css'; => import classes from './Header.module.css'; 

    - classes=> it's a JavaScript object that will be generated by that underlying build process which you could name [classes or styles] whatever you want

*-> instead of adding paragraph as a text-value:
      <p className="paragraph"></p>

    - we should now add a dynamic value:
      <p className={classes.paragraph}></p>

      => className={classes.paragraph}, this className is now unique for this component file

      * if I add "paragraph" class as a text-value (className="paragraph") in another component, will not be affected by it because:
      -> the original "paragraph" defined in the Header.module.css get transformed by that build process
      -> this "build-process" will ensures that my class styles "are scoped"

      => even you can apply style "conditionally"

? disadvantage:
-> you may end up with many relatively small CSS files in your project
*/

/* Styled-Components-> Nested Rules, Media Queries

=> & img {
    .....
  }  => with this rule( & ) here should affect any image elements that are inside of this header

*/

/* Styled-Component CODE
? import { styled } from 'styled-components';

?const StyledHeader = styled.header`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-top: 2rem;
  margin-bottom: 2rem;

  & img {
    object-fit: contain;
    margin-bottom: 2rem;
    width: 11rem;
    height: 11rem;
  }

  & h1 {
    font-size: 1.5rem;
    font-weight: 600;
    letter-spacing: 0.4em;
    text-align: center;
    text-transform: uppercase;
    color: #9a3412;
    font-family: 'Pacifico', cursive;
    margin: 0;
  }

  & p {
    text-align: center;
    color: #a39191;
    margin: 0;
  }

  @media (min-width: 768px) {
    
    & {
      margin-bottom: 4rem;
    } 
    
OR just this -> margin-bottom: 4rem;

    & h1 {
      font-size: 2.25rem;
    }
  }
`;

?export default function Header() {
  return (
    <StyledHeader>
      <img src={logo} alt="A canvas" />
      <h1>ReactArt</h1>
      <p>A community of artists and art-lovers.</p>
    </StyledHeader>
  );
}

*/
